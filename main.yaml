AWSTemplateFormatVersion: "2010-09-09"

Description: EC2のテンプレート

Parameters:
  ProjectName:
    Description: プロジェクト名
    Type: String
    Default: poc-project
  EnvironmentShort:
    Description: 環境(proof-of-content/development/staging/production)
    Type: String
    AllowedValues:
      - poc
      - dev
      - stg
      - prd
    Default: poc
  Ec2ImageId:
    Type: String

Mappings:
  EnvironmentLong:
    poc:
      value: proof-of-content
    dev:
      value: development
    stg:
      value: staging
    prd:
      value: production

Resources:
  ##############################################################################
  # Vpc
  ##############################################################################
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true # PrivateLinkを設置するのに要true
      EnableDnsHostnames: true # PrivateLinkを設置するのに要true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}
        - Key: Environment
          Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
  ##############################################################################
  # Routing to internet
  ##############################################################################
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-igw
        - Key: Environment
          Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc
  RouteTableForPublicSubnets:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-rt
        - Key: Environment
          Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
  RoutingToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
      RouteTableId: !Ref RouteTableForPublicSubnets
  ##############################################################################
  # Public sunets
  ##############################################################################
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet-1a
        - Key: Environment
          Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
  RouteTableAssociationForPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTableForPublicSubnets
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet-1c
        - Key: Environment
          Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
  RouteTableAssociationForPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTableForPublicSubnets
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1d
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-public-subnet-1d
        - Key: Environment
          Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
  RouteTableAssociationForPublicSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref RouteTableForPublicSubnets
  ##############################################################################
  # Ec2 for web, you can access by ssm
  ##############################################################################
  SecurityGroupForWebFromInternet:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub allow-from-internet-for-${ProjectName}
      GroupDescription: 'ex:IGW--sg--ALB,IGW--sg--EC2'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort : 80
              ToPort : 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort : 443
              ToPort : 443
              CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub allow-web-from-internet-for-${ProjectName}
        - Key: Environment
          Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
  Ec2InstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      RoleName: !Sub ${ProjectName}-ec2-role-${EnvironmentShort}
      Tags:
        - Key: Environment
          Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref Ec2InstanceProfileRole
      Path: "/"
      Roles:
        - !Ref Ec2InstanceProfileRole
  Ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${ProjectName}-ec2-template-${EnvironmentShort}
      LaunchTemplateData:
        BlockDeviceMappings: # Optional
          - DeviceName: /dev/sda1
            Ebs:
              DeleteOnTermination: true
              Encrypted: false
              VolumeSize: 8
              VolumeType: gp2
        IamInstanceProfile:
          Arn: !GetAtt Ec2InstanceProfile.Arn
        ImageId: !Ref Ec2ImageId
        InstanceType: t2.micro
        Monitoring:
          Enabled: false
        UserData: # userdataのログは /var/log/cloud-init-output.log
          Fn::Base64:
            !Sub |
            #!/bin/bash -xe
            apt-get update
            apt-get install -y jq tree awscli tmux make
            echo '---------------------------------[ Docker ]'
            apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
            echo '---------------------------------[ duf ]'
            cd /tmp && wget https://github.com/muesli/duf/releases/download/v0.6.0/duf_0.6.0_linux_x86_64.tar.gz
            cd /tmp && (echo 2cf2e6263dcdd4809c1a9ca2ee50ce0c228c5720a1d3ddd1cae084f8fbfe1ae1  duf_0.6.0_linux_x86_64.tar.gz | sha256sum --check -) && tar -zxvf duf_0.6.0_linux_x86_64.tar.gz && mv duf /usr/local/bin/duf
      #Tags: # Unsupported [AWS::EC2::LaunchTemplate-Tags #184](https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/184)
      #  - Key: Environment
      #    Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2LaunchTemplate
        Version: !GetAtt Ec2LaunchTemplate.LatestVersionNumber
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroupForWebFromInternet
          SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-1
        - Key: Environment
          Value: !FindInMap [EnvironmentLong, !Ref EnvironmentShort, value]
